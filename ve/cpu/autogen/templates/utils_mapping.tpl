#compiler-settings
directiveStartToken= %
#end compiler-settings
%slurp
#include "utils.hpp" 
//
//  NOTE: This file is autogenerated based on the tac-definition.
//        You should therefore not edit it manually.
//
using namespace std;
namespace kp{
namespace core{

KP_ETYPE bhtype_to_etype(bh_type bhtype)
{
    switch(bhtype) {
        %for $type in $types
        case $type['enum']: return ${type['name']};
        %end for
    }
    throw runtime_error("Unsupported bhtype, cannot map to etype.");
}

string operation_text(KP_OPERATION op)
{
    switch(op) {
        %for $op in $ops
        case $op['name']:   return "${op['name']}";
        %end for
    }
    return "_ERR-OP_";
}

string operator_text(KP_OPERATOR oper)
{
    switch(oper) {
    %for $oper in $opers
        case $oper['name']: return "${oper['name']}";
    %end for
    }
    return "_ERR-OPER_";
}

string etype_text(KP_ETYPE etype)
{
    switch(etype) {
        %for $type in $types
        case $type['name']: return "${type['name']}";
        %end for
    }
    return "_ERR-KP_ETYPE_";
}

string etype_text_shand(KP_ETYPE etype)
{
    switch(etype) {
        %for $type in $types
        case $type['name']: return string("${type['shorthand']}");
        %end for
    }
    return string("_ERR-KP_ETYPE-SH_");
}

string etype_to_ctype_text(KP_ETYPE etype)
{
    switch(etype) {
        %for $type in $types
        case $type['name']: return "${type['c']}";
        %end for
    }
    return "_ERR-EtoC_";
}

string layout_text(KP_LAYOUT layout)
{
    switch(layout) {
        %for $layout in $layouts
        case $layout['name']:
            return "${layout['name']}";
        %end for
    }
    return "_ERR-KP_LAYOUT_";
}

string layout_text_shand(KP_LAYOUT layout)
{
    switch(layout) {
        %for $layout in $layouts
        case $layout['name']:
            return "${layout['shorthand']}";
        %end for
    }
    return "_ERR-KP_LAYOUT-SH_";
}

}}

