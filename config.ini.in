#
# Stack configurations, which are a comma separated lists of components.
# NB: 'stacks' is a reserved section name and 'default'
#     is used when 'BH_STACKS' is unset.
#     The bridge is never part of the list
#
[stacks]
default    = bcexp_cpu, bccon, topological, node, cpu
cpu_greedy = bcexp_cpu, bccon, greedy, node, cpu
gpu        = bcexp_gpu, dimclean, greedy, node, gpu, cpu
openmp     = bcexp_openmp, bccon_openmp, node, openmp
opencl     = bcexp_openmp, bccon_openmp, node, opencl, openmp

#
# Managers
#

[node]
impl = ${CMAKE_INSTALL_PREFIX}/lib/libbh_vem_node${CMAKE_SHARED_LIBRARY_SUFFIX}
timing = false

[proxy]
address = localhost
port = 4200
impl = ${CMAKE_INSTALL_PREFIX}/lib/libbh_vem_proxy${CMAKE_SHARED_LIBRARY_SUFFIX}

[visualizer]
address = localhost
port = 4200
impl = ${CMAKE_INSTALL_PREFIX}/lib/libbh_vem_visualizer${CMAKE_SHARED_LIBRARY_SUFFIX}
libs = ${CMAKE_INSTALL_PREFIX}/lib/libbh_visualizer${CMAKE_SHARED_LIBRARY_SUFFIX}

[cluster]
impl = ${CMAKE_INSTALL_PREFIX}/lib/libbh_vem_cluster${CMAKE_SHARED_LIBRARY_SUFFIX}


#
# Fusers
#

[singleton]
impl = ${CMAKE_INSTALL_PREFIX}/lib/libbh_fuser_singleton${CMAKE_SHARED_LIBRARY_SUFFIX}
fuse_cache = true
cache_path=${CMAKE_INSTALL_PREFIX}/var/bohrium/fuse_cache
timing = false

[topological]
impl = ${CMAKE_INSTALL_PREFIX}/lib/libbh_fuser_topological${CMAKE_SHARED_LIBRARY_SUFFIX}
fuse_cache = true
cache_path=${CMAKE_INSTALL_PREFIX}/var/bohrium/fuse_cache
timing = false

[gentle]
impl = ${CMAKE_INSTALL_PREFIX}/lib/libbh_fuser_gentle${CMAKE_SHARED_LIBRARY_SUFFIX}
fuse_cache = true
cache_path=${CMAKE_INSTALL_PREFIX}/var/bohrium/fuse_cache
timing = false

[greedy]
impl = ${CMAKE_INSTALL_PREFIX}/lib/libbh_fuser_greedy${CMAKE_SHARED_LIBRARY_SUFFIX}
fuse_cache = true
cache_path=${CMAKE_INSTALL_PREFIX}/var/bohrium/fuse_cache
timing = false

[optimal]
impl = ${CMAKE_INSTALL_PREFIX}/lib/libbh_fuser_optimal${CMAKE_SHARED_LIBRARY_SUFFIX}
fuse_cache = true
cache_path=${CMAKE_INSTALL_PREFIX}/var/bohrium/fuse_cache
timing = false


#
# Filters - Helpers / Tools
#
[pprint]
impl = ${CMAKE_INSTALL_PREFIX}/lib/libbh_filter_pprint${CMAKE_SHARED_LIBRARY_SUFFIX}

[fuseprinter]
impl = ${CMAKE_INSTALL_PREFIX}/lib/libbh_filter_fuseprinter${CMAKE_SHARED_LIBRARY_SUFFIX}

[pricer]
impl = ${CMAKE_INSTALL_PREFIX}/lib/libbh_filter_pricer${CMAKE_SHARED_LIBRARY_SUFFIX}


#
# Filters - Bytecode transformers
#
[bccon_openmp]
impl = ${CMAKE_INSTALL_PREFIX}/lib/libbh_filter_bccon${CMAKE_SHARED_LIBRARY_SUFFIX}
collect = true
stupidmath = true
muladd = true
reduction = false
find_repeats = false

[bcexp_openmp]
impl = ${CMAKE_INSTALL_PREFIX}/lib/libbh_filter_bcexp${CMAKE_SHARED_LIBRARY_SUFFIX}
matmul = true
powk = true
sign = false
repeat = false

[dimclean]
impl = ${CMAKE_INSTALL_PREFIX}/lib/libbh_filter_dimclean${CMAKE_SHARED_LIBRARY_SUFFIX}
timing = false

[bccon]
impl = ${CMAKE_INSTALL_PREFIX}/lib/libbh_filter_bccon${CMAKE_SHARED_LIBRARY_SUFFIX}
reduction = true
collect = true
find_repeats = false
stupidmath = true
muladd = true
timing = false
verbose = false

[noneremover]
impl = ${CMAKE_INSTALL_PREFIX}/lib/libbh_filter_noneremover${CMAKE_SHARED_LIBRARY_SUFFIX}
timing = false
verbose = false

[bcexp]
impl = ${CMAKE_INSTALL_PREFIX}/lib/libbh_filter_bcexp${CMAKE_SHARED_LIBRARY_SUFFIX}
gc_threshold = 400
matmul = 1
sign = 1
powk = 1
reduce1d = 0
repeat = 0
timing = false
verbose = false

[bcexp_gpu]
impl = ${CMAKE_INSTALL_PREFIX}/lib/libbh_filter_bcexp${CMAKE_SHARED_LIBRARY_SUFFIX}
gc_threshold = 400
matmul = 1
sign = 1
powk = 1
reduce1d = 32000
repeat = 0
timing = false
verbose = false

[bcexp_cpu]
impl = ${CMAKE_INSTALL_PREFIX}/lib/libbh_filter_bcexp${CMAKE_SHARED_LIBRARY_SUFFIX}
gc_threshold = 400
matmul = 1
sign = 0
powk = 1
reduce1d = 0
repeat = 0
timing = false
verbose = false


#
# Engines
#
[openmp]
impl = ${CMAKE_INSTALL_PREFIX}/lib/libbh_ve_openmp${CMAKE_SHARED_LIBRARY_SUFFIX}
verbose = false
prof = false # Profiling statistics
graph = false # Write a Graphviz graph for each kernel
compiler_cmd = "${VE_OPENMP_COMPILER_CMD}"
compiler_inc = "${VE_OPENMP_COMPILER_INC}"
compiler_lib = "${VE_OPENMP_COMPILER_LIB}"
compiler_flg = "${VE_OPENMP_COMPILER_FLG}"
compiler_openmp = ${_VE_OPENMP_COMPILER_OPENMP}
compiler_openmp_simd = ${_VE_OPENMP_COMPILER_OPENMP_SIMD}
# List of extension methods
libs = ${CMAKE_INSTALL_PREFIX}/lib/libbh_visualizer${CMAKE_SHARED_LIBRARY_SUFFIX}

[opencl]
impl = ${CMAKE_INSTALL_PREFIX}/lib/libbh_ve_opencl${CMAKE_SHARED_LIBRARY_SUFFIX}
verbose = false
prof = false #Profiling statistics
graph = false # Write a Graphviz graph for each kernel
# Additional options given to the opencl compiler. See documentation for clBuildProgram
compiler_flg = "${VE_OPENMP_COMPILER_INC}"
# List of extension methods
libs = ${CMAKE_INSTALL_PREFIX}/lib/libbh_visualizer${CMAKE_SHARED_LIBRARY_SUFFIX}

[cpu]
impl = ${CMAKE_INSTALL_PREFIX}/lib/libbh_ve_cpu${CMAKE_SHARED_LIBRARY_SUFFIX}
libs = ${CMAKE_INSTALL_PREFIX}/lib/libbh_visualizer${CMAKE_SHARED_LIBRARY_SUFFIX},${CMAKE_INSTALL_PREFIX}/lib/libbh_fftw${CMAKE_SHARED_LIBRARY_SUFFIX}
timing = ${VE_CPU_TIMING}
bind = ${VE_CPU_BIND}
vcache_size = ${VE_CPU_VCACHE_SIZE}
preload = ${VE_CPU_PRELOAD}
jit_level = ${VE_CPU_JIT_LEVEL}
jit_dumpsrc = ${VE_CPU_JIT_DUMPSRC}
jit_offload = ${VE_CPU_JIT_OFFLOAD}
compiler_cmd="${VE_CPU_COMPILER_CMD}"
compiler_inc="${VE_CPU_COMPILER_INC}"
compiler_lib="${VE_CPU_COMPILER_LIB}"
compiler_flg="${VE_CPU_COMPILER_FLG}"
compiler_ext="${VE_CPU_COMPILER_EXT}"
object_path="${VE_CPU_OBJECT_PATH}"
template_path="${VE_CPU_TEMPLATE_PATH}"
kernel_path="${VE_CPU_KERNEL_PATH}"
##
## Extra flags for JIT-compilation, add manually for experimentation.
##
## Interlagos
## -mprefer-avx128 -fprefetch-loop-arrays --param prefetch-latency=300 -fno-tree-pre -ftree-vectorize -funroll-all-loops
##
## Xeon Phi / Intel MIC
## -offload-attribute-target=mic
##

[gpu]
impl = ${CMAKE_INSTALL_PREFIX}/lib/libbh_ve_gpu${CMAKE_SHARED_LIBRARY_SUFFIX}
libs = ${CMAKE_INSTALL_PREFIX}/lib/libbh_ve_gpu${CMAKE_SHARED_LIBRARY_SUFFIX}
include = ${CMAKE_INSTALL_PREFIX}/share/bohrium/include
# Aditional options (string) given to the opencl compiler. See documentation for clBuildProgram
#compiler_options = "-cl-opt-disable"
work_goup_size_1dx = 128
work_goup_size_2dx = 32
work_goup_size_2dy = 4
work_goup_size_3dx = 32
work_goup_size_3dy = 2
work_goup_size_3dz = 2
# kernel = {[both],fixed,dynamic}
kernel = both
# compile = {[async],sync}
compile = sync
verbose = false
timing = false
print_source = false
force_cpu = false
