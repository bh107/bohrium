#pragma once

using namespace std;

<% @opcodes_two_args_constant.each do |m, hash| %>
<% types = hash[:types] %>
/**
    <%= m.capitalize %> a Bohrium array of type T.

    @param result The resulting array.
    @param selfObj The calling object.
    @param arg The constant argument.
*/
template <typename T>
inline void _<%= m %>(bhDataObj<T>* result, bhDataObj<T>* selfObj, size_t arg) {
    bhxx::BhArray<T>* selfArray = get_bhary(selfObj);
    // Cannot choose a dimension larger than the array shape size.
    assert(selfArray->shape.size() > arg);

    // FIXME: We assume we only ever have two dimensions
    bhxx::Shape _shape;
    size_t self_size = selfArray->shape.size();
    if (self_size == 1) {
        _shape = {1};
    } else {
        if (selfArray->shape[self_size - arg - 1] == 1) {
            _shape = {selfArray->shape[arg]};
        } else {
            _shape = {selfArray->shape[self_size - arg - 1]};
        }
    }

    bhxx::BhArray<T>* bhary = new bhxx::BhArray<T>(_shape);

    bhxx::<%= m %>(*bhary, *selfArray, arg);

    result->bhary = bhary;
    result->type  = selfObj->type;
}

/**
    <%= m.capitalize %> a Bohrium array.

    @param self The calling object.
    @param arg The constant argument.
    @returns The resulting array.
*/
VALUE bh_array_m_<%= m %>(VALUE self, VALUE arg) {
    UNPACK(int64_t, tmpObj);

    VALUE res = bh_array_alloc(RBASIC_CLASS(self));

    switch (tmpObj->type) {
        <% types.each do |type, ruby_types| %>
            <% ruby_types.each do |ruby_type| %>
            case <%= ruby_type %>: {
                UNPACK(<%= type %>, selfObj);
                UNPACK_(<%= type %>, result, res);
                _<%= m %><<%= type %>>(result, selfObj, NUM2INT(arg));
                break;
            }
            <% end %>
        <% end %>
        default:
            rb_raise(rb_eRuntimeError, "Wrong type for '<%= m %>'.");
    }

    return res;
}
<% end %>
