#pragma once

using namespace std;

inline bool is_constant(VALUE val) {
    switch (TYPE(val)) {
        case T_DATA:
            return false;
            break;
        case T_FIXNUM:
        case T_BIGNUM:
        case T_FLOAT:
        case T_TRUE:
        case T_FALSE:
            return true;
            break;
        default:
            rb_raise(rb_eRuntimeError, "Invalid type.");
    }
}

<%
def type_converter(type)
    case type
    when "T_BIGNUM"
    when "T_FIXNUM"
        return "NUM2INT"
    when "T_FLOAT"
        return "NUM2DBL"
    when "T_TRUE"
    when "T_FALSE"
        return ""
    else
        fail "Wrong type! Got #{type}."
    end
end

@opcodes_two_args.each do |m, hash| %>
<%
    types = hash[:types]
    has_constant = hash[:layouts].include?(["A", "A", "K"])
%>
/**
    <%= m.capitalize %> two Bohrium arrays of type T.

    @param result The resulting array.
    @param selfObj The calling object.
    @param otherObj The other object.
*/
template <typename T>
inline void _<%= m %>(bhDataObj<T>* result, bhDataObj<T>* selfObj, bhDataObj<T>* otherObj) {
    bhxx::BhArray<T> selfArray = selfObj->bhary;
    bhxx::BhArray<T> otherArray = otherObj->bhary;
    bhxx::BhArray<T> bhary = *(new bhxx::BhArray<T>(selfArray.shape));

    bhxx::<%= m %>(bhary, selfArray, otherArray);

    result->bhary = bhary;
    result->type = selfObj->type;
}

/**
    <%= m.capitalize %> two Bohrium arrays of type T.

    @param selfObj The calling object.
    @param otherObj The other object.
*/
template <typename T>
inline void _<%= m %>_bang(bhDataObj<T>* selfObj, bhDataObj<T>* otherObj) {
    bhxx::BhArray<T> selfArray = selfObj->bhary;
    bhxx::BhArray<T> otherArray = otherObj->bhary;

    bhxx::<%= m %>(selfArray, selfArray, otherArray);
}

<% if has_constant %>
/**
    <%= m.capitalize %> one Bohrium array and a constant of type T.

    @param result The resulting array.
    @param selfObj The calling object.
    @param value The constant value.
*/
template <typename T>
inline void _<%= m %>_constant(bhDataObj<T>* result, bhDataObj<T>* selfObj, T value) {
    bhxx::BhArray<T> selfArray = selfObj->bhary;
    bhxx::BhArray<T> bhary = *(new bhxx::BhArray<T>(selfArray.shape));

    bhxx::<%= m %>(bhary, selfArray, value);

    result->bhary = bhary;
    result->type = selfObj->type;
}

/**
    <%= m.capitalize %> one Bohrium array and a constant of type T.

    @param selfObj The calling object.
    @param value The constant value.
*/
template <typename T>
inline void _<%= m %>_constant_bang(bhDataObj<T>* selfObj, T value) {
    bhxx::BhArray<T> selfArray = selfObj->bhary;
    bhxx::<%= m %>(selfArray, selfArray, value);
}
<% end %>

/**
    <%= m.capitalize %> two Bohrium arrays.

    @param self The calling object.
    @param other The other object.
    @returns The resulting array.
*/
VALUE bh_array_m_<%= m %>(VALUE self, VALUE other) {
    bhDataObj<int64_t> *tmpObj;
    Data_Get_Struct(self, bhDataObj<int64_t>, tmpObj);

    VALUE res = bh_array_alloc(RBASIC_CLASS(self));

    switch (tmpObj->type) {
        <% types.each do |type, ruby_types| %>
            <% ruby_types.each do |ruby_type| %>
            case <%= ruby_type %>: {
                bhDataObj<<%= type %>> *selfObj, *result;
                Data_Get_Struct(self, bhDataObj<<%= type %>>, selfObj);
                Data_Get_Struct(res, bhDataObj<<%= type %>>, result);

                <% if has_constant %>
                if (is_constant(other)) {
                    _<%= m %>_constant<<%= type %>>(result, selfObj, <%= type_converter(ruby_type) %>(other));
                } else <% end %>{
                    bhDataObj<<%= type %>> *otherObj;
                    Data_Get_Struct(other, bhDataObj<<%= type %>>, otherObj);
                    assert(selfObj->type == otherObj->type);
                    _<%= m %><<%= type %>>(result, selfObj, otherObj);
                }
                break;
            }
            <% end %>
        <% end %>
        default:
            rb_raise(rb_eRuntimeError, "Wrong type for '<%= m %>'.");
    }

    return res;
}

/**
    <%= m.capitalize %> two Bohrium arrays.

    @param self The calling object.
    @param other The other object.
    @returns The resulting array.
*/
VALUE bh_array_m_<%= m %>_bang(VALUE self, VALUE other) {
    bhDataObj<int64_t> *tmpObj;
    Data_Get_Struct(self, bhDataObj<int64_t>, tmpObj);

    switch (tmpObj->type) {
        <% types.each do |type, ruby_types| %>
            <% ruby_types.each do |ruby_type| %>
            case <%= ruby_type %>: {
                bhDataObj<<%= type %>> *selfObj;
                Data_Get_Struct(self, bhDataObj<<%= type %>>, selfObj);

                <% if has_constant %>
                if (is_constant(other)) {
                    _<%= m %>_constant_bang<<%= type %>>(selfObj, <%= type_converter(ruby_type) %>(other));
                } else <% end %>{
                    bhDataObj<<%= type %>> *otherObj;
                    Data_Get_Struct(other, bhDataObj<<%= type %>>, otherObj);
                    assert(selfObj->type == otherObj->type);
                    _<%= m %>_bang<<%= type %>>(selfObj, otherObj);
                }
                break;
            }
            <% end %>
        <% end %>
        default:
            rb_raise(rb_eRuntimeError, "Wrong type for '<%= m %>!'.");
    }

    return self;
}
<% end %>
